// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/MariusSchmidt/slf4go/slf4go_api (interfaces: Slf4GoLogger)

// Package test_mocks is a generated GoMock package.
package test_mocks

import (
	reflect "reflect"

	slf4go_api "github.com/MariusSchmidt/slf4go/slf4go_api"
	gomock "github.com/golang/mock/gomock"
)

// MockSlf4GoLogger is a mock of Slf4GoLogger interface.
type MockSlf4GoLogger struct {
	ctrl     *gomock.Controller
	recorder *MockSlf4GoLoggerMockRecorder
}

// MockSlf4GoLoggerMockRecorder is the mock recorder for MockSlf4GoLogger.
type MockSlf4GoLoggerMockRecorder struct {
	mock *MockSlf4GoLogger
}

// NewMockSlf4GoLogger creates a new mock instance.
func NewMockSlf4GoLogger(ctrl *gomock.Controller) *MockSlf4GoLogger {
	mock := &MockSlf4GoLogger{ctrl: ctrl}
	mock.recorder = &MockSlf4GoLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlf4GoLogger) EXPECT() *MockSlf4GoLoggerMockRecorder {
	return m.recorder
}

// DebugWithTagsf mocks base method.
func (m *MockSlf4GoLogger) DebugWithTagsf(arg0 slf4go_api.LogTags, arg1 string, arg2 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "DebugWithTagsf", varargs...)
}

// DebugWithTagsf indicates an expected call of DebugWithTagsf.
func (mr *MockSlf4GoLoggerMockRecorder) DebugWithTagsf(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugWithTagsf", reflect.TypeOf((*MockSlf4GoLogger)(nil).DebugWithTagsf), varargs...)
}

// Debugf mocks base method.
func (m *MockSlf4GoLogger) Debugf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockSlf4GoLoggerMockRecorder) Debugf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockSlf4GoLogger)(nil).Debugf), varargs...)
}

// ErrorWithTagsf mocks base method.
func (m *MockSlf4GoLogger) ErrorWithTagsf(arg0 slf4go_api.LogTags, arg1 string, arg2 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ErrorWithTagsf", varargs...)
}

// ErrorWithTagsf indicates an expected call of ErrorWithTagsf.
func (mr *MockSlf4GoLoggerMockRecorder) ErrorWithTagsf(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorWithTagsf", reflect.TypeOf((*MockSlf4GoLogger)(nil).ErrorWithTagsf), varargs...)
}

// Errorf mocks base method.
func (m *MockSlf4GoLogger) Errorf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockSlf4GoLoggerMockRecorder) Errorf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockSlf4GoLogger)(nil).Errorf), varargs...)
}

// FatalWithTagsf mocks base method.
func (m *MockSlf4GoLogger) FatalWithTagsf(arg0 slf4go_api.LogTags, arg1 string, arg2 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "FatalWithTagsf", varargs...)
}

// FatalWithTagsf indicates an expected call of FatalWithTagsf.
func (mr *MockSlf4GoLoggerMockRecorder) FatalWithTagsf(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FatalWithTagsf", reflect.TypeOf((*MockSlf4GoLogger)(nil).FatalWithTagsf), varargs...)
}

// Fatalf mocks base method.
func (m *MockSlf4GoLogger) Fatalf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatalf", varargs...)
}

// Fatalf indicates an expected call of Fatalf.
func (mr *MockSlf4GoLoggerMockRecorder) Fatalf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalf", reflect.TypeOf((*MockSlf4GoLogger)(nil).Fatalf), varargs...)
}

// InfoWithTagsf mocks base method.
func (m *MockSlf4GoLogger) InfoWithTagsf(arg0 slf4go_api.LogTags, arg1 string, arg2 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "InfoWithTagsf", varargs...)
}

// InfoWithTagsf indicates an expected call of InfoWithTagsf.
func (mr *MockSlf4GoLoggerMockRecorder) InfoWithTagsf(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoWithTagsf", reflect.TypeOf((*MockSlf4GoLogger)(nil).InfoWithTagsf), varargs...)
}

// Infof mocks base method.
func (m *MockSlf4GoLogger) Infof(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockSlf4GoLoggerMockRecorder) Infof(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockSlf4GoLogger)(nil).Infof), varargs...)
}

// LogWithTagsf mocks base method.
func (m *MockSlf4GoLogger) LogWithTagsf(arg0 slf4go_api.LogLevel, arg1 slf4go_api.LogTags, arg2 string, arg3 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "LogWithTagsf", varargs...)
}

// LogWithTagsf indicates an expected call of LogWithTagsf.
func (mr *MockSlf4GoLoggerMockRecorder) LogWithTagsf(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogWithTagsf", reflect.TypeOf((*MockSlf4GoLogger)(nil).LogWithTagsf), varargs...)
}

// Logf mocks base method.
func (m *MockSlf4GoLogger) Logf(arg0 slf4go_api.LogLevel, arg1 string, arg2 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Logf", varargs...)
}

// Logf indicates an expected call of Logf.
func (mr *MockSlf4GoLoggerMockRecorder) Logf(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logf", reflect.TypeOf((*MockSlf4GoLogger)(nil).Logf), varargs...)
}

// PanicWithTagsf mocks base method.
func (m *MockSlf4GoLogger) PanicWithTagsf(arg0 slf4go_api.LogTags, arg1 string, arg2 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "PanicWithTagsf", varargs...)
}

// PanicWithTagsf indicates an expected call of PanicWithTagsf.
func (mr *MockSlf4GoLoggerMockRecorder) PanicWithTagsf(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PanicWithTagsf", reflect.TypeOf((*MockSlf4GoLogger)(nil).PanicWithTagsf), varargs...)
}

// Panicf mocks base method.
func (m *MockSlf4GoLogger) Panicf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Panicf", varargs...)
}

// Panicf indicates an expected call of Panicf.
func (mr *MockSlf4GoLoggerMockRecorder) Panicf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panicf", reflect.TypeOf((*MockSlf4GoLogger)(nil).Panicf), varargs...)
}

// TraceWithTagsf mocks base method.
func (m *MockSlf4GoLogger) TraceWithTagsf(arg0 slf4go_api.LogTags, arg1 string, arg2 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "TraceWithTagsf", varargs...)
}

// TraceWithTagsf indicates an expected call of TraceWithTagsf.
func (mr *MockSlf4GoLoggerMockRecorder) TraceWithTagsf(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceWithTagsf", reflect.TypeOf((*MockSlf4GoLogger)(nil).TraceWithTagsf), varargs...)
}

// Tracef mocks base method.
func (m *MockSlf4GoLogger) Tracef(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Tracef", varargs...)
}

// Tracef indicates an expected call of Tracef.
func (mr *MockSlf4GoLoggerMockRecorder) Tracef(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tracef", reflect.TypeOf((*MockSlf4GoLogger)(nil).Tracef), varargs...)
}

// WarnWithTagsf mocks base method.
func (m *MockSlf4GoLogger) WarnWithTagsf(arg0 slf4go_api.LogTags, arg1 string, arg2 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "WarnWithTagsf", varargs...)
}

// WarnWithTagsf indicates an expected call of WarnWithTagsf.
func (mr *MockSlf4GoLoggerMockRecorder) WarnWithTagsf(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarnWithTagsf", reflect.TypeOf((*MockSlf4GoLogger)(nil).WarnWithTagsf), varargs...)
}

// Warnf mocks base method.
func (m *MockSlf4GoLogger) Warnf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf.
func (mr *MockSlf4GoLoggerMockRecorder) Warnf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*MockSlf4GoLogger)(nil).Warnf), varargs...)
}

// WarningWithTagsf mocks base method.
func (m *MockSlf4GoLogger) WarningWithTagsf(arg0 slf4go_api.LogTags, arg1 string, arg2 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "WarningWithTagsf", varargs...)
}

// WarningWithTagsf indicates an expected call of WarningWithTagsf.
func (mr *MockSlf4GoLoggerMockRecorder) WarningWithTagsf(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarningWithTagsf", reflect.TypeOf((*MockSlf4GoLogger)(nil).WarningWithTagsf), varargs...)
}

// Warningf mocks base method.
func (m *MockSlf4GoLogger) Warningf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warningf", varargs...)
}

// Warningf indicates an expected call of Warningf.
func (mr *MockSlf4GoLoggerMockRecorder) Warningf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warningf", reflect.TypeOf((*MockSlf4GoLogger)(nil).Warningf), varargs...)
}

// WithDefaultTags mocks base method.
func (m *MockSlf4GoLogger) WithDefaultTags(arg0 slf4go_api.LogTags) slf4go_api.Slf4GoLogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithDefaultTags", arg0)
	ret0, _ := ret[0].(slf4go_api.Slf4GoLogger)
	return ret0
}

// WithDefaultTags indicates an expected call of WithDefaultTags.
func (mr *MockSlf4GoLoggerMockRecorder) WithDefaultTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDefaultTags", reflect.TypeOf((*MockSlf4GoLogger)(nil).WithDefaultTags), arg0)
}
